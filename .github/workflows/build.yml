name: Build

on:
 push:
 workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'true'

env:
#默认软件包
  FEEDS_CONF: feeds.conf.default
#默认内核配置
  KERNEL_CONF: kconfig.seed
#默认内核宏文件名
  KERNEL_IN: kConfig.in

defaults:
  run:
    shell: bash

jobs:
  verify :
   runs-on: ubuntu-latest
   name: File Verify
   env:
     isWork: '{"include":[]}'
   strategy:
    fail-fast: false
    matrix:
     work: [openwrt,lienol,lede]
   outputs:
     matrix: env.isWork
   steps:
   - name: Checkout
     uses: actions/checkout@main
     
   - name: Start SSH via tmate
     uses: P3TERX/ssh2actions@main
     if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
     env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      
   - name: Check ${{matrix.work}}
     id: check_files
     uses: andstor/file-existence-action@v1
     with:
      files: "${{matrix.work}}"
   - name: File Existence ${{matrix.work}}
     run: |
      echo "is${{matrix.work}}=${{steps.check_files.outputs.files_exists}}" >> $GITHUB_ENV
   - name: existes
     if: env.is${{matrix.work}} =='true'
     run: |
      echo "${{matrix.work}}:${{steps.check_files.outputs.files_exists}}"
      echo "::set-output name=matrix::${{steps.check_files.outputs.files_exists}}"
      echo ${{fromJSON(env.isWork)}}
      

  OpenWrt :
   runs-on: ubuntu-latest
   name: Verify OpenWrt Config   
   needs: verify   
   outputs:
    isx86config: ${{ steps.isx86.outputs.isconfig }}
   steps:
     - name: Dump GitHub context
       env:
        GITHUB_CONTEXT: ${{ toJSON(github) }}
       run: echo "$GITHUB_CONTEXT"

     - name: Dump GitHub noeeds
       env:
        NEEDS_CONTEXT: ${{ toJSON(needs) }}
       run: echo "$NEEDS_CONTEXT"

     - name: Dump job context
       env:
        JOB_CONTEXT: ${{ toJSON(job) }}
       run: echo "$JOB_CONTEXT"
     - name: Dump steps context
       env:
        STEPS_CONTEXT: ${{ toJSON(steps) }}
       run: echo "$STEPS_CONTEXT"
     - name: Dump runner context
       env:
          RUNNER_CONTEXT: ${{ toJSON(runner) }}
       run: echo "$RUNNER_CONTEXT"
     - name: Dump strategy context
       env:
          STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
       run: echo "$STRATEGY_CONTEXT"
     - name: Dump matrix context
       env:
          MATRIX_CONTEXT: ${{ toJSON(matrix) }}
       run: echo "$MATRIX_CONTEXT"
             
  Lienol :
   runs-on: ubuntu-latest
   name: Verify Lienol Config   
   needs: verify
   if: needs.verify.env.islienol == 'true'
   outputs:
    isx86config: ${{ steps.isx86.outputs.files_exists }}
   steps:
     - name: Verify X86 Files
       id: isx86       
       uses: andstor/file-existence-action@v1
       with:
        files: "lede/X86,lede/X86/feeds.conf.default,lede/X86/config.seed"
  Lade :
   runs-on: ubuntu-latest
   name: Verify Lade Config   
   needs: verify
   if: needs.verify.outputs.islede == 'true'
   outputs:
    isx86config: ${{ steps.isx86.outputs.files_exists }}
   steps:
     - name: Verify X86 Files
       id: isx86       
       uses: andstor/file-existence-action@v1
       with:
        files: "lienol/X86,lienol/X86/feeds.conf.default,lienol/X86/config.seed"
  
  X86 :
   runs-on: ubuntu-latest
   name: Make X86 Config
   if: always()
   needs: [verify,OpenWrt,Lienol,Lade]
   steps:
     - name: Make OpenWrt Config
       id: makex86openwrt
       if: (needs.verify.outputs.isopenwrt == 'true') && (needs.OpenWrt.outputs.isx86config == 'true')
       run: |
         echo 11

     - name: Make Lade Config
       id: makex86lade
       if: (needs.verify.outputs.islede == 'true') && (needs.Lade.outputs.isx86config == 'true')
       run: |
         echo 222

     - name: Make Lienol Config
       id: makex86lienol
       if: (needs.verify.outputs.islienol == 'true') && (needs.Lienol.outputs.isx86config == 'true')
       run: |
         echo 333


