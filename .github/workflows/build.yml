name: Build Firmware

on:
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH connection to Actions"
        required: true
        default: "false"
  schedule:
    - cron:  '0 6 * * *'
env:
  #默认软件包
  FEEDS_CONF: feeds.conf.default
  #默认配置文件名
  CONFIG_CONF: config.seed
  #默认内核配置
  KERNEL_CONF: kconfig.seed
  #默认内核宏文件名
  KERNEL_IN: kConfig.in
  #是否开启内容合并
  CONF_ISMERGE: true
  #是否自动生成内核宏
  KERNEL_ISMERAGE: true
  #是否开启内核文件注入到配置
  IS_KERNEL_CONF: true
  #配置文件是否存在
  IS_CONFIG_CONF: false

  AUTO_SH_FILE1: "ready.sh"
  AUTO_SH_FILE2: "comply.sh"
  AUTO_SH_RUN: true

defaults:
  run:
    shell: bash

jobs:
  verify:
    runs-on: ubuntu-latest
    name: File Verify ${{matrix.work}} ${{matrix.arch}}
    strategy:
      fail-fast: false
      matrix:
        work: [openwrt, lienol, lede]
        arch: [x86]
    outputs:
      isWork: '{"include":["openwrt":${{env.isopenwrt}},"lede":${{env.islede}},"lienol":${{env.islienol}}]}'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Check work ${{matrix.work}}
        id: check_work
        uses: andstor/file-existence-action@v1.0.1
        with:
          files: "${{matrix.work}}"

      - name: Check ${{matrix.work}} Arch ${{matrix.arch}}
        id: check_arch
        if: steps.check_work.outputs.files_exists == 'true'
        uses: andstor/file-existence-action@v1.0.1
        with:
          files: "${{matrix.work}}/${{matrix.arch}}"

      - name: Check ${{matrix.work}} Arch ${{matrix.arch}} Config
        id: check_config
        if: steps.check_arch.outputs.files_exists == 'true'
        uses: andstor/file-existence-action@v1.0.1
        with:
          files: "${{matrix.work}}/${{matrix.arch}}/${{env.FEEDS_CONF}}, ${{matrix.work}}/${{matrix.arch}}/${{env.CONFIG_CONF}}"

      - name: Make Config
        if: steps.check_config.outputs.files_exists == 'true'
        run: |
          if ${{env.CONF_ISMERGE}} ;then
            if [ -f ${GITHUB_WORKSPACE}/default/${{matrix.arch}}/default.seed ] ;then
              cat ${GITHUB_WORKSPACE}/default/${{matrix.arch}}/default.seed >> ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/.config          
            fi
            #默认所有架构都需要安装的包
            if [ -f ${GITHUB_WORKSPACE}/default/default.seed ] ;then
              cat ${GITHUB_WORKSPACE}/default/default.seed >> ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/.config          
            fi
          fi
          cat ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/${{env.CONFIG_CONF}} >> ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/.config

      - name: Make Kernel
        id: kernel
        if: steps.check_config.outputs.files_exists == 'true' && (env.IS_KERNEL_CONF == 'true' && env.IS_KERNEL_CONF != 'false')
        run: |
          #默认
          if [ -f ${GITHUB_WORKSPACE}/default/${{env.KERNEL_CONF}} ];then 
              cat ${GITHUB_WORKSPACE}/default/${{env.KERNEL_CONF}} >> ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/.kConfig
          fi
          if [ -f ${GITHUB_WORKSPACE}/default/${{env.KERNEL_IN}} ];then 
              cat ${GITHUB_WORKSPACE}/default/${{env.KERNEL_IN}} >> ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/.kConfig.in
          fi
          #默认指定架构
          if [ -f ${GITHUB_WORKSPACE}/default/${{matrix.arch}}/${{env.KERNEL_CONF}} ];then 
              cat ${GITHUB_WORKSPACE}/default/${{matrix.arch}}/${{env.KERNEL_CONF}} >> ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/.kConfig
          fi
          if [ -f ${GITHUB_WORKSPACE}/default/${{matrix.arch}}/${{env.KERNEL_IN}} ];then 
              cat ${GITHUB_WORKSPACE}/default/${{matrix.arch}}/${{env.KERNEL_IN}} >> ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/.kConfig.in
          fi

          #指定架构
          if [ -f ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/${{env.KERNEL_CONF}} ];then 
              cat ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/${{env.KERNEL_CONF}} >> ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/.kConfig
          fi
          if [ -f ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/${{env.KERNEL_IN}} ];then 
              cat ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/${{env.KERNEL_IN}} >> ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/.kConfig.in          
          fi          
          cp ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/.kConfig.in ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/${{env.KERNEL_IN}}
      - name: Start SSH via tmate
        uses: P3TERX/ssh2actions@main
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

      - name: Auto ${{matrix.arch}} Kernel in
        if: steps.check_config.outputs.files_exists == 'true' && (env.IS_KERNEL_CONF == 'true' && env.IS_KERNEL_CONF != 'false') && env.KERNEL_ISMERAGE == 'true'
        run: |
          [ -e default/kernel.sh ] && chmod +x default/kernel.sh
          echo 'kernel'
          rm -rf ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/${{env.KERNEL_IN}}
          ./default/kernel.sh ${{matrix.work}}/${{matrix.arch}}/.kConfig ${{matrix.work}}/${{matrix.arch}}/${{env.KERNEL_IN}}

      - name: "Upload Artifact"
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.work}}_${{matrix.arch}}_config
          path: |
            default/default.sh
            ${{matrix.work}}/${{matrix.arch}}/.config
            ${{matrix.work}}/${{matrix.arch}}/.kConfig
            ${{matrix.work}}/${{matrix.arch}}/${{env.KERNEL_IN}}

      - name: Aotou Config
        if: steps.check_config.outputs.files_exists == 'true'
        run: |
          [[ -d ${{matrix.work}}/${{matrix.arch}}/ ]] && ls -lah ${{matrix.work}}/${{matrix.arch}}/
          if [ -f ${{matrix.work}}/${{matrix.arch}}/.kConfig ];then cat ${{matrix.work}}/${{matrix.arch}}/.kConfig;fi
          if [ -f ${{matrix.work}}/${{matrix.arch}}/.kConfig.in ];then cat ${{matrix.work}}/${{matrix.arch}}/.kConfig.in;fi
      
      - name: Cache Config
        if: steps.check_config.outputs.files_exists == 'true'
        uses: actions/cache@v2
        with:
          path: |
            ${{matrix.work}}/${{matrix.arch}}/.config 
            ${{matrix.work}}/${{matrix.arch}}/${{env.KERNEL_IN}}
          key: ${{matrix.work}}_${{matrix.arch}}_config

  Make:
    runs-on: ubuntu-latest
    name: Make ${{matrix.work}} ${{matrix.arch}}
    needs: verify
    strategy:
      fail-fast: false
      matrix:
        work: [openwrt, lienol, lede]
        arch: [x86]
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{matrix.work}}_${{matrix.arch}}_config

      #删除工作件
      - name: Delete Artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: ${{matrix.work}}_${{matrix.arch}}_config
          failOnError: false
      #验证必要的配置文件是否存在
      - name: Check ${{matrix.work}} ${{matrix.arch}} Config
        id: check_config
        uses: andstor/file-existence-action@v1.0.1
        with:
          files: "${{matrix.work}}, ${{matrix.work}}/${{matrix.arch}}, ${{matrix.work}}/${{matrix.arch}}/.config,${{matrix.work}}/${{matrix.arch}}/${{env.FEEDS_CONF}}"
      - name: Set Config Status
        if: steps.check_config.outputs.files_exists == 'true'
        run: echo "IS_CONFIG_CONF=true" >> $GITHUB_ENV

        #找到必要配置文件开始设置运行环境
      - name: Install Initialization
        if: env.IS_CONFIG_CONF == 'true'
        run: |
          echo "有配置文件继续后面流程"
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update > /dev/null
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) > /dev/null
          sudo -E apt-get -qq install lftp > /dev/null
          sudo -E apt-get -qq autoremove --purge > /dev/null
          sudo -E apt-get -qq clean > /dev/null
          sudo timedatectl set-timezone "Asia/Shanghai"

      - name: Load ${{matrix.work}} Env
        if: env.IS_CONFIG_CONF == 'true'
        run: |
          source "${GITHUB_WORKSPACE}/${{matrix.work}}/.env"
          echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
          echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
          echo "UP_WETRANSFER=${UP_WETRANSFER}" >> $GITHUB_ENV
          echo "UP_FTP=${UP_FTP}" >> $GITHUB_ENV
          if $UP_FTP =='true';then            
            echo "FTP_SERVER=${FTP_SERVER}" >> $GITHUB_ENV
            echo "FTP_USERNAME=${FTP_USERNAME}" >> $GITHUB_ENV
          fi

          echo "UP_QINIU=${UP_QINIU}" >> $GITHUB_ENV
          if $UP_QINIU =='true';then            
            echo "QINIU_SERVER=${QINIU_SERVER}" >> $GITHUB_ENV
            echo "QINIU_BUCKET=${QINIU_BUCKET}" >> $GITHUB_ENV
          fi

      - name: Clone ${{matrix.work}} source code
        if: env.IS_CONFIG_CONF == 'true'
        run: |
          git clone $REPO_URL -b $REPO_BRANCH work

      - name: Copy ${{matrix.arch}} Feeds
        if: env.IS_CONFIG_CONF == 'true'
        run: |
          [ -e ${{matrix.work}}/${{matrix.arch}}/${{env.FEEDS_CONF}} ] && mv ${{matrix.work}}/${{matrix.arch}}/${{env.FEEDS_CONF}} work/feeds.conf.default
          ls -lah
          cd work/ && git status && ls -lah

      - name: Update feeds
        if: env.IS_CONFIG_CONF == 'true'
        working-directory: ./work
        run: ./scripts/feeds update -a

      - name: Ready Shell RUN
        if: env.AUTO_SH_RUN && env.IS_CONFIG_CONF == 'true'
        run: |
          [ -e ${{matrix.work}}/${{matrix.arch}}/${{env.AUTO_SH_FILE1}} ] && chmod +x ${{matrix.work}}/${{matrix.arch}}/${{env.AUTO_SH_FILE1}}
          cd work && ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/${{env.AUTO_SH_FILE1}}
          
      - name: Install feeds
        if: env.IS_CONFIG_CONF == 'true'
        working-directory: ./work
        run: ./scripts/feeds install -a

      - name: Copy ${{matrix.arch}} Config
        if: env.IS_CONFIG_CONF == 'true'
        run: |
          [ -e ${{matrix.work}}/${{matrix.arch}}/.config ] && mv ${{matrix.work}}/${{matrix.arch}}/.config work/.config
          cat work/.config
          cd work/ && git status && ls -lah
          
      - name: Download ${{matrix.work}} package
        if: env.IS_CONFIG_CONF == 'true'
        working-directory: ./work
        id: package
        run: |
          cat .config
          ls -lah
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Comply Shell Run
        if: env.AUTO_SH_RUN && env.IS_CONFIG_CONF == 'true'
        run: |
          [ -e ${{matrix.work}}/${{matrix.arch}}/${{env.AUTO_SH_FILE2}} ] && chmod +x ${{matrix.work}}/${{matrix.arch}}/${{env.AUTO_SH_FILE2}}
          cd work
          ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/${{env.AUTO_SH_FILE2}}

      - name: Get  ${{matrix.work}} ${{matrix.arch}} Config Env
        if: env.IS_CONFIG_CONF == 'true'
        working-directory: ./work
        run: |
          cat .config
          echo "DEVICE_NAME=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/')" >> $GITHUB_ENV
          echo "DEVICE_ARCH=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*_(.*)_DEVICE_.*=y/\1/')" >> $GITHUB_ENV
          echo "DEVICE_TARGET=$(grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/CONFIG_TARGET_(.*)_DEVICE_.*=y/\1/')" >> $GITHUB_ENV
          
      - name: Auto ${{matrix.arch}} Kernel Config
        if: env.IS_CONFIG_CONF == 'true' && env.IS_KERNEL_CONF =='true'
        run: |
          cat ${GITHUB_WORKSPACE}/${{matrix.work}}/${{matrix.arch}}/.kConfig >> work/.config
          [ -e ${{matrix.work}}/${{matrix.arch}}/${{env.KERNEL_IN}} ] && cat ${{matrix.work}}/${{matrix.arch}}/${{env.KERNEL_IN}} >> work/config/Config-kernel.in

      - name: Make ${{matrix.work}} ${{matrix.arch}}
        if: env.IS_CONFIG_CONF == 'true'
        id: make
        working-directory: ./work
        run: |
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "FIRMWARE=work/bin" >> $GITHUB_ENV

      - name: "Upload firmware  Artifact"
        if: env.IS_CONFIG_CONF == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.work}}-${{matrix.arch}}-firmware
          path: |
            ${{matrix.work}}/${{matrix.arch}}/.config
            ${{env.FIRMWARE}}
            !${{env.FIRMWARE}}/targets/${{matrix.arch}}/${{env.DEVICE_ARCH}}/openwrt-x86-64?.gz

      # - name: Sync firmware Qiniu Deploy
      #   if: env.UP_QINIU =='true' && env.IS_CONFIG_CONF == 'true' && !cancelled()
      #   uses: saltbo/uptoc@master
      #   with:
      #     driver: qiniu
      #     region: ${{env.QINIU_SERVER}}
      #     bucket: ${{env.QINIU_BUCKET}}
      #     exclude: .git
      #     dist: ${{env.FIRMWARE}}
      #     saveroot: ${{matrix.work}}
      #   env:
      #     UPTOC_UPLOADER_AK: ${{ secrets.UPTOC_UPLOADER_AK }}
      #     UPTOC_UPLOADER_SK: ${{ secrets.UPTOC_UPLOADER_SK }}

      - name: Upload firmware to WeTransfer
        id: wetransfer
        if: env.UP_WETRANSFER =='true' && !cancelled()
        run: |
          rm -rf ${FIRMWARE}/targets/${{matrix.arch}}/${{env.DEVICE_ARCH}}/packages
          ls -lah ${FIRMWARE}/targets/${{matrix.arch}}/${{env.DEVICE_ARCH}}/
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE}/targets/${{matrix.arch}}/${{env.DEVICE_ARCH}}/ 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
      
      - name: Sync firmware Upload FTP
        id: ftpfirmware
        if: env.UP_FTP =='true' && env.IS_CONFIG_CONF == 'true' && !cancelled()
        uses: MitchWind/ftp-deploy@master
        with:
          server: ${{env.FTP_SERVER}}
          username: ${{env.FTP_USERNAME}}
          password: ${{ secrets.FTP_PASSWOD }}
          ssl_allow: true
          local_dir: ${{env.FIRMWARE}}/targets/${{matrix.arch}}/${{env.DEVICE_ARCH}}
          server_dir: firmware/${{matrix.work}}
          debug: false
          options: " --parallel=8"


  Upload:
    name: Upload firmware 
    runs-on: ubuntu-latest
    needs: Make
    if: ${{ always() }}
    strategy:
      fail-fast: false
      matrix:
        work: [openwrt, lienol, lede]
        arch: [x86]
    steps:
      - name: Checkout
        uses: actions/checkout@main
      - run: |
          sudo mkdir -p /work/${{matrix.work}}
          sudo chown $USER:$GROUPS /work/${{matrix.work}}
      #下载工作件
      - name: Download ${{matrix.work}} firmware Artifact
        uses: actions/download-artifact@v2
        id: download
        with:
          name: ${{matrix.work}}-${{matrix.arch}}-firmware
          path: /work/${{matrix.work}}
      #删除工作件
      - name: Delete ${{matrix.work}} firmware Artifact
        uses: geekyeggo/delete-artifact@v1
        with:
          name: ${{matrix.work}}-${{matrix.arch}}-firmware
          failOnError: false
      - name: Files Show
        working-directory: "${{steps.download.outputs.download-path}}"
        run: |
          cd work/bin
          ls -lah
          pwd
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
      #验证必要的配置文件是否存在
      - name: Check ${{matrix.work}} ${{matrix.arch}} Config
        id: check_config
        uses: andstor/file-existence-action@v1.0.1
        with:
          files: "${{matrix.work}}, ${{matrix.work}}/${{matrix.arch}}"
      - name: Set Config Status
        if: steps.check_config.outputs.files_exists == 'true'
        run: echo "IS_CONFIG_CONF=true" >> $GITHUB_ENV

      - name: Load ${{matrix.work}} Env
        if: env.IS_CONFIG_CONF == 'true'
        run: |
          source "${GITHUB_WORKSPACE}/${{matrix.work}}/.env"
          echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
          echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
          echo "UP_WETRANSFER=${UP_WETRANSFER}" >> $GITHUB_ENV
          echo "UP_FTP=${UP_FTP}" >> $GITHUB_ENV
          if $UP_FTP =='true';then            
            echo "FTP_SERVER=${FTP_SERVER}" >> $GITHUB_ENV
            echo "FTP_USERNAME=${FTP_USERNAME}" >> $GITHUB_ENV
          fi

          echo "UP_QINIU=${UP_QINIU}" >> $GITHUB_ENV
          if $UP_QINIU =='true';then            
            echo "QINIU_SERVER=${QINIU_SERVER}" >> $GITHUB_ENV
            echo "QINIU_BUCKET=${QINIU_BUCKET}" >> $GITHUB_ENV
          fi

      - name: Sync firmware Upload FTP
        id: ftpfirmware
        if: env.UP_FTP =='true' && env.IS_CONFIG_CONF == 'true' && !cancelled()
        uses: MitchWind/ftp-deploy@master
        with:
          server: ${{env.FTP_SERVER}}
          username: ${{env.FTP_USERNAME}}
          password: ${{ secrets.FTP_PASSWOD }}
          ssl_allow: true
          local_dir: ${{env.FIRMWARE}}
          server_dir: ${{matrix.work}}
          debug: false
          options: " --parallel=8"

  Clean:
    name: Clean Jobs
    runs-on: ubuntu-latest
    needs: [Make,Upload]
    if: ${{ always() }}
    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
      - name: Remove old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: '1 day'
